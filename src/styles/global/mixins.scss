@function em($pixels, $context: $base-font-size) {
    @return #{$pixels/$context}em;
  }

  @mixin placeholder {
    &::-webkit-input-placeholder {@content}
    &:-moz-placeholder           {@content}
    &::-moz-placeholder          {@content}
    &:-ms-input-placeholder      {@content}
  }

  //
  // Mixins
  // --------------------------------------------------

  @mixin mobile {
      @media (min-width: #{$mobileWidth}) {
          @content;
      }
  }

  @mixin largeMobile {
      @media (min-width: #{$largeMobileWidth}) {
          @content;
      }
  }

  @mixin tablet {
      @media (min-width: #{$tabletWidth}) {
          @content;
      }
  }

  @mixin desktop {
      @media (min-width: #{$desktopWidth}) {
          @content;
      }
  }

  @mixin largeDesktop {
      @media (min-width: #{$largeDesktopWidth}) {
          @content;
      }
  }

  // https://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
  @function strip-unit($num) {
      @return $num / ($num * 0 + 1);
  }

  @mixin rem($property, $values...) {
      $max: length($values);
      $pxValues: "";
      $remValues: "";
      @for $i from 1 through $max {
          $value: strip-unit(nth($values, $i));
          $pxValues: #{$pxValues + $value * 10}px;
          @if $i < $max {
              $pxValues: #{$pxValues + " "};
          }
      }
      @for $i from 1 through $max {
          $value: strip-unit(nth($values, $i));
          $remValues: #{$remValues + $value}rem;
          @if $i < $max {
              $remValues: #{$remValues + " "};
          }
      }
      #{$property}: $pxValues;
      #{$property}: $remValues;
  }

  // Placeholder text
  //@mixin placeholder($color: $placeholderText) {
  //    &:-moz-placeholder {
  //        color: $color;
  //    }
  //    &:-ms-input-placeholder {
  //        color: $color;
  //    }
  //    &::-webkit-input-placeholder {
  //        color: $color;
  //    }
  //}

  // Hide text
  @mixin hide-text($height: 1em) {
      height: $height;
      line-height: 1.5;
      overflow: hidden;
      &::before {
          content: "";
          display: block;
          width: 0;
          height: 100%;
      }
  }

  // Clearfix
  @mixin clearfix {
      &:before,
      &:after {
          content: "";
          display: table;
      }
      &:after {
          clear: both;
      }
  }

  // Text overflow
  // Requires inline-block or block for proper styling
  @mixin text-overflow {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
  }

  // Resize anything
  @mixin resizable($direction) {
      resize: $direction; // Options: horizontal, vertical, both
      overflow: auto; // Safari fix
  }

  @mixin line-break {
      -ms-word-break: break-all;
      word-break: break-all;
      word-break: break-word; // <== Non standard for webkit
      @include hyphens;
  }

  /// Mixin printing a linear-gradient
  /// as well as a plain color fallback
  /// and the `-webkit-` prefixed declaration
  /// @access public
  /// @param {Keyword | Angle} $direction - Linear gradient direction
  /// @param {Arglist} $color-stops - List of color-stops composing the gradient
  @mixin linear-gradient($direction, $color-stops...) {
      background: nth(nth($color-stops, 1), 1);
      background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
      background: linear-gradient($direction, $color-stops);
  }

  @mixin animation($animate...) {
      $max: length($animate);
      $animations: '';

      @for $i from 1 through $max {
          $animations: #{$animations + nth($animate, $i)};

          @if $i < $max {
              $animations: #{$animations + ", "};
          }
      }
      -webkit-animation: $animations;
      -moz-animation:    $animations;
      -o-animation:      $animations;
      animation:         $animations;
  }

  @mixin keyframes($animationName) {
      @-webkit-keyframes #{$animationName} {
          @content;
      }
      @-moz-keyframes #{$animationName} {
          @content;
      }
      @-o-keyframes #{$animationName} {
          @content;
      }
      @keyframes #{$animationName} {
          @content;
      }
  }
  //USAGE
  //@include keyframes(move-the-object) {
  //	0%   { left: 100px; }
  //	100% { left: 200px; }
  //}
  //
  //.object-to-animate {
  //	@include animation('move-the-object .5s 1', 'move-the-object-again .5s 1 .5s');
  //}

  @include keyframes(animate-mouse-icon) {
      0%   {
          transform: translate(30%, -30%);
      }
      65%   {
          transform: translate(-30%, 30%);
      }
      100% {
          transform: translate(30%, -30%);
      }
  }
  @include keyframes(handle_pulse) {
      0%   {
          transform: scale(.25, .25);
          opacity: 0;
      }
      10%   {
          transform: scale(.7, .7);
          opacity: 1;
      }
      40% {
          transform: scale(1, 1);
          opacity: 0;
      }
      100% {
          transform: scale(1, 1);
          opacity: 0;
      }
  }
  @include keyframes(rotate-image) {
      0%   {
          transform: translate(-50%, -50%) rotate(0deg);
      }
      100% {
          transform: translate(-50%, -50%) rotate(360deg);
      }
  }
  @include keyframes(rotateThisClockwise) {
      0% {
          transform: rotate(360deg);
      }
      100% {
          transform: rotate(0);
      }
  }

  @include keyframes(animate-tap-icon) {
      0%   {
          transform: translate(40%, 40%);
      }
      65%   {
          transform: translate(-40%, -40%);
      }
      100% {
          transform: translate(40%, 40%);
      }
  }

  @include keyframes(sdb07) {
      0% {
          opacity: 0;
      }
      50% {
          opacity: 1;
      }
      100% {
          opacity: 0;
      }
  }